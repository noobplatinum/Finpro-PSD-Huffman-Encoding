library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use STD.TEXTIO.ALL;

entity NodeSorter_tb is
end NodeSorter_tb;

architecture Behavioral of NodeSorter_tb is
    -- Component declaration
    component NodeSorter is
        Port (
            clk           : in  STD_LOGIC;
            reset         : in  STD_LOGIC;
            node_ready    : in  STD_LOGIC;
            node_char     : in  STD_LOGIC_VECTOR(7 downto 0);
            node_freq     : in  INTEGER;
            input_done    : in  STD_LOGIC;
            sort_ready    : out STD_LOGIC;
            sorted_char   : out STD_LOGIC_VECTOR(7 downto 0);
            sorted_freq   : out INTEGER;
            sort_done     : out STD_LOGIC
        );
    end component;

    -- Test signals
    signal clk           : STD_LOGIC := '0';
    signal reset         : STD_LOGIC := '0';
    signal node_ready    : STD_LOGIC := '0';
    signal node_char     : STD_LOGIC_VECTOR(7 downto 0) := (others => '0');
    signal node_freq     : INTEGER := 0;
    signal input_done    : STD_LOGIC := '0';
    signal sort_ready    : STD_LOGIC;
    signal sorted_char   : STD_LOGIC_VECTOR(7 downto 0);
    signal sorted_freq   : INTEGER;
    signal sort_done     : STD_LOGIC;

    -- Clock period definition
    constant CLK_PERIOD : time := 1 s;

    -- Test data type
    type test_data is record
        char    : character;
        freq    : integer;
    end record;

    -- Test vector
    type test_array is array (0 to 7) of test_data;
    constant TEST_VECTOR : test_array := (
        ('e', 1),
        ('i', 1),
        ('o', 1),
        ('p', 1),
        ('r', 3),
        ('s', 2),
        ('u', 2),
        ('v', 2)
    );

begin
    -- Instantiate NodeSorter
    uut: NodeSorter port map (
        clk => clk,
        reset => reset,
        node_ready => node_ready,
        node_char => node_char,
        node_freq => node_freq,
        input_done => input_done,
        sort_ready => sort_ready,
        sorted_char => sorted_char,
        sorted_freq => sorted_freq,
        sort_done => sort_done
    );

    -- Clock process
    clk_process: process
    begin
        clk <= '0';
        wait for CLK_PERIOD/2;
        clk <= '1';
        wait for CLK_PERIOD/2;
    end process;

    -- Stimulus process
    stim_proc: process
    begin
        -- Reset
        reset <= '1';
        wait for CLK_PERIOD*2;
        reset <= '0';
        wait for CLK_PERIOD;

        -- Input test vector
        for i in TEST_VECTOR'range loop
            node_ready <= '1';
            node_char <= std_logic_vector(to_unsigned(character'pos(TEST_VECTOR(i).char), 8));
            node_freq <= TEST_VECTOR(i).freq;
            
            wait for CLK_PERIOD;
            report "Sending: Char = " & TEST_VECTOR(i).char & 
                   ", Freq = " & integer'image(TEST_VECTOR(i).freq);
        end loop;

        node_ready <= '0';
        input_done <= '1';
        wait for CLK_PERIOD;
        input_done <= '0';

        -- Wait for sorting and output
        while sort_done /= '1' loop
            if sort_ready = '1' then
                report "Received sorted: Char = " & 
                       character'val(to_integer(unsigned(sorted_char))) &
                       ", Freq = " & integer'image(sorted_freq);
            end if;
            wait for CLK_PERIOD;
        end loop;

        report "Test completed";
        wait;
    end process;

end Behavioral;
